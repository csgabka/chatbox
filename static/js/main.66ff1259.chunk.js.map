{"version":3,"sources":["Components/Button/Button.js","Components/Input/Input.js","Components/Backdrop/Backdrop.js","firebase.js","Components/Auth/Auth.js","Components/Chatbox/Chat/Chat.js","Components/Chatbox/Chatbox.js","Components/Home/Home.js","Components/Error/Error.js","App.js","serviceWorker.js","index.js"],"names":["button","props","className","onClick","handleSubmit","name","input","placeholder","onChange","changeHandler","backdrop","children","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","GoogleAuthProvider","Auth","e","preventDefault","setState","username","target","value","console","log","state","history","push","pathname","bind","style","fontSize","Component","Chat","chats","this","map","chat","index","postDate","Date","timestamp","key","getDate","getMonth","message","Chatbox","logoutUser","getTime","database","ref","on","snapshot","getChats","val","ascChats","Home","location","Error","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.66ff1259.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst button = (props) => {\r\n  return (\r\n  <div>\r\n    <button className=\"Login\"\r\n    onClick={props.handleSubmit}>{props.name}</button>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default button;\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n  return (\r\n  <div>\r\n    <input className=\"Name\"\r\n     placeholder={props.placeholder}\r\n     onChange={props.changeHandler}></input>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default input;\r\n","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = (props) => {\r\n  return (\r\n  <div className=\"Backdrop\">\r\n    {props.children}\r\n  </div>\r\n);\r\n}\r\n\r\nexport default backdrop;\r\n","import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: \"chatbox-c869f.firebaseapp.com\",\r\n    databaseURL: \"https://chatbox-c869f.firebaseio.com\",\r\n    projectId: \"chatbox-c869f\",\r\n    storageBucket: \"chatbox-c869f.appspot.com\",\r\n    messagingSenderId: \"245751615680\",\r\n    appId: \"1:245751615680:web:a159f1a6cd0a98f9625d25\",\r\n    measurementId: \"G-HJSF19GTDN\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\nexport default firebase;\r\n","import React, { Component } from  'react';\r\nimport Button from '../Button/Button';\r\nimport Input from '../Input/Input';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport './Auth.css';\r\nimport firebase from '../../firebase.js';\r\n\r\n\r\nclass Auth extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      username: ''\r\n    }\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n\r\n  changeHandler = (e) => {\r\n    e.preventDefault();\r\n    this.setState({username: e.target.value});\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    console.log(this.state.username);\r\n    e.preventDefault();\r\n    const username = this.state.username;\r\n      this.props.history.push({\r\n        pathname: '/chat',\r\n        state: { username: username }\r\n  });\r\n}\r\n\r\n  render() {\r\n\r\n    let style = {\r\n      fontSize: 30\r\n    }\r\n      return(\r\n          <div className=\"Auth\">\r\n            <h1 style={style}>Chatbox</h1>\r\n            <Backdrop>\r\n              <h1>Login</h1>\r\n              <Input placeholder=\"Type your name...\"\r\n               changeHandler={(e) => this.changeHandler(e)}/>\r\n              <Button name=\"login\"\r\n              handleSubmit={(e) => this.handleSubmit(e)} />\r\n            </Backdrop>\r\n          </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","import React, {Component} from 'react';\r\nimport firebase from '../../../firebase.js';\r\n\r\nclass Chat extends Component {\r\n  render() {\r\n    let chats = this.props.chats;\r\n\r\n    console.log(chats);\r\n    return (\r\n      <div>\r\n        <ul>\r\n        {chats.map((chat, index) => {\r\n          const postDate = new Date(chat.timestamp);\r\n          return (\r\n            <li key={index}>{chat.username} {postDate.getDate() + '/' + (postDate.getMonth()+1)}: {chat.message}</li>\r\n          );\r\n        })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React, {Component} from 'react';\r\nimport Input from '../Input/Input';\r\nimport Button from '../Button/Button';\r\nimport Chat from './Chat/Chat';\r\nimport firebase from '../../firebase.js';\r\n\r\nclass Chatbox extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      message: '',\r\n      chats: []\r\n    }\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const chatRef = firebase.database().ref('chat');\r\n    chatRef.on('value', snapshot => {\r\n      const getChats = snapshot.val();\r\n      let ascChats = [];\r\n      for(let chat in getChats){\r\n        ascChats.push({\r\n          message: getChats[chat].message,\r\n          username: getChats[chat].username,\r\n          timestamp: getChats[chat].timestamp\r\n        });\r\n      }\r\n      this.setState({chats: ascChats});\r\n  });\r\n}\r\n\r\n  changeHandler = (e) => {\r\n    e.preventDefault();\r\n    this.setState({message: e.target.value});\r\n  }\r\n\r\n  logoutUser = (e) => {\r\n    e.preventDefault();\r\n    //TO DO!\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const chat = {\r\n      message: this.state.message,\r\n      username: this.props.username,\r\n      timestamp: new Date().getTime()\r\n    }\r\n    let userRef = firebase.database().ref('chat');\r\n    userRef.push(chat);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Button\r\n      name=\"logout\"\r\n      handleSubmit={this.logoutUser} />\r\n      <Chat chats={this.state.chats}/>\r\n        <Input changeHandler={(e) => this.changeHandler(e)}/>\r\n        <Button handleSubmit={(e) => {this.handleSubmit(e)}}\r\n        name=\"send\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chatbox;\r\n","import React, { Component } from  'react';\r\nimport Chatbox from '../Chatbox/Chatbox';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Home</h1>\r\n        <h3>Welcome {this.props.location.state.username}!!!</h3>\r\n        <Chatbox username={this.props.location.state.username}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from  'react';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nclass Error extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n      <Backdrop>\r\n        <h1>Oooooops...something went wrong!</h1>\r\n      </Backdrop>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Error;\r\n","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\nimport Auth from './Components/Auth/Auth';\nimport Home from './Components/Home/Home';\nimport Error from './Components/Error/Error';\nimport './App.css';\n\nclass App extends Component {\n\n\n  render() {\n\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact component={Auth} />\n          <Route path=\"/chat\" exact component={Home} />\n          <Route component={Error} />\n        </Switch>\n        </div>\n      </BrowserRouter>\n\n\n      );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}